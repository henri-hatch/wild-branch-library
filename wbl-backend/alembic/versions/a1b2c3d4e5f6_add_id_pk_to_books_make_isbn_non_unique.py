"""add id pk to books make isbn non unique

Revision ID: a1b2c3d4e5f6
Revises: 9caf537e5fc0
Create Date: 2025-05-09 10:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a1b2c3d4e5f6'
down_revision: Union[str, None] = '9caf537e5fc0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Add the new 'id' column using Identity for auto-generation (preferred for modern PostgreSQL)
    op.add_column('books', sa.Column('id', sa.Integer(), sa.Identity(), nullable=False))

    # Alter existing columns as needed (making them non-nullable)
    op.alter_column('books', 'isbn',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.alter_column('books', 'title',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('books', 'author',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('books', 'location',
               existing_type=sa.VARCHAR(100),
               nullable=False)
    op.alter_column('books', 'owner_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    # Drop the existing primary key constraint on 'isbn'
    try:
        op.drop_constraint('books_pkey', 'books', type_='primary')
        print("Successfully dropped constraint 'books_pkey'.")
    except Exception as e_pkey:
        print(f"Could not drop constraint 'books_pkey': {e_pkey}. Trying 'pk_books_isbn'.")
        try:
            op.drop_constraint('pk_books_isbn', 'books', type_='primary')
            print("Successfully dropped constraint 'pk_books_isbn'.")
        except Exception as e_pk_isbn:
            print(f"Could not drop constraint 'pk_books_isbn': {e_pk_isbn}. The migration might fail if an old PK on ISBN still exists.")

    # Attempt to drop the old unique index on ISBN if it exists
    # The error message refers to "ix_books_isbn"
    try:
        op.drop_index('ix_books_isbn', table_name='books')
        print("Successfully dropped unique index 'ix_books_isbn'.")
    except Exception as e_ix_isbn:
        print(f"Could not drop index 'ix_books_isbn': {e_ix_isbn}. It might not exist or was already dropped.")

    # Create primary key on 'id'
    op.create_primary_key('pk_books_id', 'books', ['id'])
    
    # Ensure 'isbn' still has a non-unique index
    op.create_index(op.f('ix_books_isbn_non_unique'), 'books', ['isbn'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_books_isbn_non_unique'), table_name='books')
    
    op.drop_constraint('pk_books_id', 'books', type_='primary')
    op.drop_column('books', 'id')

    # Restore columns to previous state
    op.alter_column('books', 'owner_id',
               existing_type=sa.INTEGER(),
               nullable=True) 
    op.alter_column('books', 'location',
               existing_type=sa.VARCHAR(100),
               nullable=True) 
    op.alter_column('books', 'author',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('books', 'title',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    
    # Restore ISBN as PK and unique index
    op.alter_column('books', 'isbn',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.create_primary_key('books_pkey', 'books', ['isbn'])
    # Recreate the original unique index on ISBN that we dropped in upgrade
    op.create_index('ix_books_isbn', 'books', ['isbn'], unique=True)

    # ### end Alembic commands ###
